#!/usr/bin/env wolframscript
(* ::Package:: *)

(* ::Title:: *)
(*Coral-algae model from Cunning et al 2017*)


(* ::Subtitle:: *)
(*Numerics: ODE method, with 2 fluxes (jCP and \[Rho]C) as state variables*)


(* ::Input:: *)
(*(*parameters*)*)
(*nNH=.18;*)
(*nNS=.13;*)
(*nNX=0.22;*)
(*j0HT=.03;*)
(*j0ST=.03;*)
(*\[Sigma]NH=.9;*)
(*\[Sigma]CH=.1;*)
(*\[Sigma]NS=.9;*)
(*\[Sigma]CS=.9;*)
(*jXm=.13;*)
(*KX=10^-6;*)
(*jNm=.035;*)
(*KN=1.5 10^-6;*)
(*kCO2=10;*)
(*jHGm=1;*)
(*yCL=.1;*)
(*yC=.8;*)
(*astar=1.34;*)
(*kNPQ=112;*)
(*kROS=80;*)
(*jCPm=2.8;*)
(*jSGm=0.25;*)
(*b=5;*)
(*X=10^-7;*)
(*L=20;*)
(*\[CapitalNu]=10^-7;(*attention this is \[CapitalNu] not N. Type: esc N esc*)*)
(*tmax=250;*)
(*(*initial values*)*)
(*inivalues={\[Rho]C->1,jCP->1,H->1000,S->1};*)
(*(*convergence speed for numerical method*)*)
(*\[Lambda]=100;*)
(*(*derived*)*)
(*(*SU*)*)
(*F[\[Rho]_][A_,B_]:=(A B (A+B) \[Rho])/(A^2 B+A B^2+A^2 \[Rho]+A B \[Rho]+B^2 \[Rho]);*)
(*jX=(jXm X)/(X+KX);*)
(*jN=(jNm \[CapitalNu])/(\[CapitalNu]+KN);*)
(*jHT=j0HT;*)
(*rNS=\[Sigma]NS nNS j0ST;*)
(*rNH=\[Sigma]NH nNH jHT;*)
(*A=1.256307+1.385969 E^(-6.479055 S/H);*)
(*(*list of states (fluxes) to track*)*)
(*(*format of elements in this list:*)*)
(*(*{ variable name, formula (aim for numerical implementation), initial guess (for numerical implementation) } *)  *)
(*tsolveall={*)
(*jHG->F[jHGm][yC (\[Rho]C S/H+jX),(jN+nNX jX+rNH)nNH^-1],*)
(*\[Rho]N->jN+nNX jX+rNH-nNH jHG,*)
(*jeC->jX+\[Rho]C S/H-jHG yC^-1,*)
(*jCO2->kCO2 jeC,*)
(*jL->A L astar,*)
(*rCH->\[Sigma]CH(jHT+(1-yC)jHG yC^-1),*)
(*rCS->\[Sigma]CS(j0ST+(1-yC)jSG yC^-1),*)
(*jCP->F[jCPm][yCL jL,(jCO2+rCH) H/S+rCS](cROS1+1)^-1,*)
(*jeL->jL-jCP yCL^-1,*)
(*jNPQ->(kNPQ^-1+jeL^-1)^-1,*)
(*cROS1->(jeL-jNPQ)/kROS,*)
(*jSG->F[jSGm][yC jCP,(\[Rho]N H/S+rNS)nNS^-1],*)
(*\[Rho]C->jCP-jSG yC^-1,*)
(*jST->j0ST(1+b cROS1)*)
(*};tsolve=Select[tsolveall,MemberQ[inivalues[[All,1]],#[[1]]]&];*)
(*tsolveothers=Select[tsolveall,Not[MemberQ[inivalues[[All,1]],#[[1]]]]&];*)
(*(*initial values for other fluxes (derived) - not needed*)*)
(*(*derivedinis=#[[1]]\[Rule](#[[2]]//.Join[inivalues,tsolve])&/@Select[tsolve,Not[MemberQ[inivalues[[All,1]],#[[1]]]]&];*)*)
(*(*names of the state variables*)*)
(*names={jSG-jST-(jHG-jHT)->"S'/S-H'/H",jSG-jST->"S'/S",jHG->"\!\(\*SubscriptBox[\(j\), \(HG\)]\)",\[Rho]N->"\!\(\*SubscriptBox[\(\[Rho]\), \(N\)]\)",jeC->"\!\(\*SubscriptBox[\(j\), \(eC\)]\)",jCO2->"\!\(\*SubscriptBox[\(j\), SubscriptBox[\(CO\), \(2\)]]\)",jL->"\!\(\*SubscriptBox[\(j\), \(L\)]\)",rCH->"\!\(\*SubscriptBox[\(r\), \(CH\)]\)",rCS->"\!\(\*SubscriptBox[\(r\), \(CS\)]\)",jCP->"\!\(\*SubscriptBox[\(j\), \(CP\)]\)",jeL->"\!\(\*SubscriptBox[\(j\), \(eL\)]\)",jNPQ->"\!\(\*SubscriptBox[\(j\), \(NPQ\)]\)",cROS1->"\!\(\*SubscriptBox[\(c\), \(ROS\)]\)-1",jSG->"\!\(\*SubscriptBox[\(j\), \(SG\)]\)",\[Rho]C->"\!\(\*SubscriptBox[\(\[Rho]\), \(C\)]\)",jST->"\!\(\*SubscriptBox[\(j\), \(ST\)]\)",S->"S",H->"H",A->"A",Log[Min[jCPm,rCS+(H (jCO2+rCH))/S]/Min[jCPm,jL yCL]]->"Log[\!\(\*FractionBox[\(Min[\*SubscriptBox[\(j\), \(CPm\)], \*SubscriptBox[\(r\), \(CS\)] + \((\*SubscriptBox[\(j\), \(CO2\)] + \*SubscriptBox[\(r\), \(CH\)])\) \*FractionBox[\(H\), \(S\)]]\), \(Min[\*SubscriptBox[\(j\), \(CPm\)], \*SubscriptBox[\(j\), \(L\)]\\\ \*SubscriptBox[\(y\), \(CL\)]]\)]\)]",Log[Min[jSGm,jCP yC]/Min[jSGm,(rNS+(H \[Rho]N)/S)/nNS]]->"Log[\!\(\*FractionBox[\(Min[\*SubscriptBox[\(j\), \(SGm\)], \*SubscriptBox[\(j\), \(CP\)]\\\ \*SubscriptBox[\(y\), \(C\)]]\), \(Min[\*SubscriptBox[\(j\), \(SGm\)], \((\*SubscriptBox[\(r\), \(NS\)] + \*SubscriptBox[\(\[Rho]\), \(N\)] \*FractionBox[\(H\), \(S\)])\) \*SuperscriptBox[SubscriptBox[\(n\), \(NS\)], \(-1\)]]\)]\)]",Log[Min[jHGm,yC (\[Rho]C S/H+jX)]/Min[jHGm,(jN+nNX jX+rNH)nNH^-1]]->"Log[\!\(\*FractionBox[\(Min[\*SubscriptBox[\(j\), \(HGm\)], \*SubscriptBox[\(y\), \(C\)]\\\ \((\*SubscriptBox[\(\[Rho]\), \(C\)]\\\ \*FractionBox[\(S\), \(H\)] + \*SubscriptBox[\(j\), \(X\)])\)]\), \(Min[\*SubscriptBox[\(j\), \(HGm\)], \((\*SubscriptBox[\(j\), \(N\)] + \*SubscriptBox[\(n\), \(NX\)]\\\ \*SubscriptBox[\(j\), \(X\)] + \*SubscriptBox[\(r\), \(NH\)])\) \*SuperscriptBox[SubscriptBox[\(n\), \(NH\)], \(-1\)]]\)]\)]",S/H->"\!\(\*FractionBox[\(S\), \(H\)]\)",Log[S]->"Log[S]",Log[H]->"Log[H]",jHG-jHT->"H'/H"};*)
(*(*get all state variables*)*)
(*states=Join[tsolve[[All,1]],{H,S}];*)
(*(*put together equations*)*)
(*addtimetostates=((#->#[t])&/@states);*)
(*eqs={#[[1]]==(#[[2]]/.addtimetostates)}&/@(Join[*)
(*(#[[1]]'[t]==(\[Lambda](Max[0,#[[2]]]-#[[1]])))&/@tsolve,*)
(*{*)
(*S'[t]==S(jSG-jST),*)
(*H'[t]==H(jHG-jHT)*)
(*}*)
(*]//.tsolveothers);*)
(*(*set initial conditions*)*)
(*inis=(#[0]==(#/.inivalues))&/@states;*)
(*(*do the simulation (solve ODEs)*)*)
(*sol=NDSolve[Join[eqs,inis],#&/@states,{t,0,tmax}][[1]];*)
(**)


(* ::Input:: *)
(*(*plots*)*)
(*(*output directory*)*)
(*SetDirectory[NotebookDirectory[]<>"plots/"];*)
(*toplot={S/H,Log[S],Log[H],jHG,jeC,jCO2,jL,rCH,jeL,jNPQ,jST,A,rCS,cROS1,\[Rho]C,\[Rho]N,jSG,jCP,Log[Min[jCPm,rCS+(H (jCO2+rCH))/S]/Min[jCPm,jL yCL]],Log[Min[jSGm,jCP yC]/Min[jSGm,(rNS+(H \[Rho]N)/S)/nNS]],Log[Min[jHGm,yC (\[Rho]C S/H+jX)]/Min[jHGm,(jN+nNX jX+rNH)nNH^-1]],\[Rho]C/\[Rho]N,jSG-jST,jHG-jHT,jSG-jST-(jHG-jHT)};*)
(*(Export["Simulations_Fig9_nNX="<>StringReplace[ToString[nNX],"."->"dot"]<>".pdf",#];#)&@Column[{Row[{"\!\(\*SubscriptBox[\(n\), \(NX\)]\)=",nNX}],Multicolumn[*)
(*Join[*)
(*Table[Plot[Evaluate@Flatten@{x//.tsolveothers/.addtimetostates/.sol},{t,0,tmax},PlotLabel->(x/.names),AxesLabel->{"t"},PlotRange->Full,AxesOrigin->{0,0}],{x,toplot}]*)
(*]*)
(*]}]*)


(* ::Input:: *)
(*(*zoomed in on kink (for nNX=0.22)*)*)
(*tzoommin=186.5;tzoommax=187.5;*)
(*(Export["Simulations_Fig9_zoom_nNX="<>StringReplace[ToString[nNX],"."->"dot"]<>".pdf",#];#)&@Column[{Row[{"\!\(\*SubscriptBox[\(n\), \(NX\)]\)=",nNX}],Multicolumn[*)
(*Join[*)
(*Table[Plot[Evaluate@Join[{x//.tsolveothers/.addtimetostates/.sol}],{t,tzoommin,tzoommax},PlotLabel->(x/.names),AxesLabel->{"t"},PlotRange->Full,AxesOrigin->{Automatic,0},TicksStyle->6,PlotStyle->{{Automatic},{Automatic,Dashed},{Automatic,Dashed},{Automatic,Dashed}},GridLines->Automatic,PlotPoints->2],{x,toplot}]*)
(*]*)
(*]}]*)


(* ::Input:: *)
(*(*Clear[findeqs];*)*)
(*findeqs[{St_,Ht_}]:=findeqs[{St,Ht}]=NSolve[Flatten[{#[[1]]==#[[2]],#[[1]]>=0}&/@tsolveall/.{S->St,H->Ht}],tsolveall[[All,1]],Reals];*)
(*sort[list_,var_]:=SortBy[list,(var/.#)&]*)
(*(*findeqs[{.1,1}]*)*)
(*sortfindeqs[SH_]:=sort[findeqs[SH],\[Rho]N];*)
(*fill[list_]:=Flatten[list,{{2},{1}}];*)


(* ::Input:: *)
(*\[CapitalDelta]t=10;*)
(*(Export["Simulations_Fig9_flux_eqs_nNX="<>StringReplace[ToString[nNX],"."->"dot"]<>".pdf",#];#)&@Column[{Row[{"\!\(\*SubscriptBox[\(n\), \(NX\)]\)=",nNX}],Multicolumn[*)
(*Table[*)
(*Show[{*)
(*If[TrueQ[MemberQ[toplot[[4;;-1]],x]],ListPlot[fill[Table[{t,#}&/@(x/.sortfindeqs[{S[t],H[t]}/.sol]/.{S->S[t],H->H[t]}/.sol),{t,0,tmax,\[CapitalDelta]t}]],AxesLabel->{"t"},PlotRange->Full,AxesOrigin->{0,0},PlotMarkers->({Graphics`PlotMarkers[][[1,1]],10}),PlotStyle->Table[ColorData[97][i],{i,2,10}]],Nothing],*)
(*Plot[Evaluate@Flatten@{x//.tsolveothers/.addtimetostates/.sol},{t,0,tmax},PlotRange->Full,PlotStyle->{Thickness[.015]}]},PlotRange->All,AxesLabel->{"t"},PlotLabel->(x/.names)]*)
(*,{x,toplot}]*)
(*]}]*)


(* ::Input:: *)
(*tzoommin=183;*)
(*tzoommax=191;*)
(*\[CapitalDelta]tzoom=.4;*)
(*(Export["Simulations_Fig9_flux_eqs_zoom_nNX="<>StringReplace[ToString[nNX],"."->"dot"]<>".pdf",#];#)&@Column[{Row[{"\!\(\*SubscriptBox[\(n\), \(NX\)]\)=",nNX}],Multicolumn[*)
(*Table[*)
(*Show[{*)
(*If[TrueQ[MemberQ[toplot[[4;;-1]],x]],ListPlot[fill[Table[{t,#}&/@(x/.sortfindeqs[{S[t],H[t]}/.sol]/.{S->S[t],H->H[t]}/.sol),{t,tzoommin,tzoommax,\[CapitalDelta]tzoom}]],AxesLabel->{"t"},PlotRange->Full,PlotMarkers->({Graphics`PlotMarkers[][[1,1]],10}),PlotStyle->Table[ColorData[97][i],{i,2,10}]],Nothing],*)
(*Plot[Evaluate@Flatten@{x//.tsolveothers/.addtimetostates/.sol},{t,tzoommin,tzoommax},PlotRange->Full,PlotStyle->{Thickness[.015]}]},PlotRange->All,AxesLabel->{"t"},PlotLabel->(x/.names),TicksStyle->6,AxesOrigin->{tzoommin,0}]*)
(*,{x,toplot}]*)
(*]}]*)


(* ::Input:: *)
(*SoverHstep=.0025;*)
(*SoverHmin=SoverHstep;*)
(*SoverHmax=.7;*)


(* ::Input:: *)
(*(Export["flux-bifurcation_nNX="<>StringReplace[ToString[nNX],"."->"dot"]<>".pdf",#];#)&@Column[{Row[{"\!\(\*SubscriptBox[\(n\), \(NX\)]\)=",nNX}],Multicolumn[*)
(*Table[ListPlot[fill[Table[{SoverH,#}&/@(x/.sortfindeqs[{SoverH,1}]/.{S->SoverH,H->1}),{SoverH,SoverHmin,SoverHmax,SoverHstep}]],AxesLabel->{"S/H"},PlotRange->Full,PlotLabel->(x/.names),PlotMarkers->({Graphics`PlotMarkers[][[1,1]],6}),PlotStyle->Table[ColorData[97][i],{i,2,10}]]*)
(*,{x,toplot[[4;;-1]]}]]}]*)
