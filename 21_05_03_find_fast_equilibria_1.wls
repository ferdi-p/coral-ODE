#!/usr/bin/env wolframscript
(* ::Package:: *)

(* ::Title:: *)
(*Code to find the flux equilibria in the coral-symbiont model from Cunning et al 2017.*)


(* ::Input:: *)
(*(*names for the fluxes as strings - to make the code compatible with any other scripts*)*)
(*fluxnames={"\!\(\*SubscriptBox[\(j\), \(HG\)]\)","\!\(\*SubscriptBox[\(\[Rho]\), \(N\)]\)","\!\(\*SubscriptBox[\(j\), \(eC\)]\)","\!\(\*SubscriptBox[\(j\), SubscriptBox[\(CO\), \(2\)]]\)","\!\(\*SubscriptBox[\(j\), \(L\)]\)","\!\(\*SubscriptBox[\(r\), \(CH\)]\)","\!\(\*SubscriptBox[\(r\), \(CS\)]\)","\!\(\*SubscriptBox[\(j\), \(CP\)]\)","\!\(\*SubscriptBox[\(j\), \(eL\)]\)","\!\(\*SubscriptBox[\(j\), \(NPQ\)]\)","\!\(\*SubscriptBox[\(c\), \(ROS\)]\)-1","\!\(\*SubscriptBox[\(j\), \(SG\)]\)","\!\(\*SubscriptBox[\(\[Rho]\), \(C\)]\)","\!\(\*SubscriptBox[\(j\), \(ST\)]\)"};*)
(*(*the function to find the equilibria*)*)
(*findeqs[{nNH_,nNS_,nNX_,j0HT_,j0ST_,\[Sigma]NH_,\[Sigma]CH_,\[Sigma]NS_,\[Sigma]CS_,jXm_,KX_,jNm_,KN_,kCO2_,jHGm_,yCL_,yC_,astar_,kNPQ_,kROS_,jCPm_,jSGm_,b_,X_,L_,\[CapitalNu]_,S_,H_}]:=Module[{jX,jN,jHT,rNS,rNH,A,F,jHG,\[Rho]N,jeC,jCO2,jL,rCH,rCS,jCP,jeL,jNPQ,cROS1,jSG,\[Rho]C,jST,tsolveall},*)
(*(*the fluxes that don't depend on anything but the input parameters (including S and H)*)*)
(*jX=(jXm X)/(X+KX);*)
(*jN=(jNm \[CapitalNu])/(\[CapitalNu]+KN);*)
(*jHT=j0HT;*)
(*rNS=\[Sigma]NS nNS j0ST;*)
(*rNH=\[Sigma]NH nNH jHT;*)
(*A=1.256307+1.385969 E^(-6.479055 S/H);*)
(*(*function for the SUs*)*)
(*F[\[Rho]_][A_,B_]:=(A B (A+B) \[Rho])/(A^2 B+A B^2+A^2 \[Rho]+A B \[Rho]+B^2 \[Rho]);*)
(*(*the flux equations to solve*)*)
(*tsolveall={*)
(*jHG->F[jHGm][yC (\[Rho]C S/H+jX),(jN+nNX jX+rNH)nNH^-1],*)
(*\[Rho]N->jN+nNX jX+rNH-nNH jHG,*)
(*jeC->jX+\[Rho]C S/H-jHG yC^-1,*)
(*jCO2->kCO2 jeC,*)
(*jL->A L astar,*)
(*rCH->\[Sigma]CH(jHT+(1-yC)jHG yC^-1),*)
(*rCS->\[Sigma]CS(j0ST+(1-yC)jSG yC^-1),*)
(*jCP->F[jCPm][yCL jL,(jCO2+rCH) H/S+rCS](cROS1+1)^-1,*)
(*jeL->jL-jCP yCL^-1,*)
(*jNPQ->(kNPQ^-1+jeL^-1)^-1,*)
(*cROS1->(jeL-jNPQ)/kROS,*)
(*jSG->F[jSGm][yC jCP,(\[Rho]N H/S+rNS)nNS^-1],*)
(*\[Rho]C->jCP-jSG yC^-1,*)
(*jST->j0ST(1+b cROS1)*)
(*};*)
(*(*find the equilibria*)*)
(*NSolve[Join[(#[[1]]==#[[2]]&/@tsolveall)/.parvals,(#>=0&/@tsolveall[[All,1]])],tsolveall[[All,1]],Reals]/.(#[[1]]->#[[2]]&/@Transpose[{tsolveall[[All,1]],fluxnames}])*)
(*];*)


(* ::Input:: *)
(*(*example*)*)
(*(*define parameter values*)*)
(*parvals={*)
(*nNH->.18,*)
(*nNS->.13,*)
(*nNX->0.2,*)
(*j0HT->.03,*)
(*j0ST->.03,*)
(*\[Sigma]NH->.9,*)
(*\[Sigma]CH->.1,*)
(*\[Sigma]NS->.9,*)
(*\[Sigma]CS->.9,*)
(*jXm->.13,*)
(*KX->10^-6,*)
(*jNm->.035,*)
(*KN->1.5 10^-6,*)
(*kCO2->10,*)
(*jHGm->1,*)
(*yCL->.1,*)
(*yC->.8,*)
(*astar->1.34,*)
(*kNPQ->112,*)
(*kROS->80,*)
(*jCPm->2.8,*)
(*jSGm->0.25,*)
(*b->5,*)
(*X->10^-7,*)
(*L->20,*)
(*\[CapitalNu]->10^-7(*attention this is \[CapitalNu] not N. Type: esc N esc*),*)
(*S->.1,*)
(*H->1};*)
(*(*find the equilibria*)*)
(*findeqs[parvals[[All,1]]/.parvals]*)
